generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(cuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now()) @map(name: "created_at")
  updatedAt  DateTime    @default(now()) @map(name: "updated_at")
  billboard  Billboard[]
  categories Category[]
  colors     Color[]
  sizes      Size[]
  products   Product[]
  orders     Order[]

  @@map("stores")
}

model Billboard {
  id         String     @id @default(cuid())
  label      String
  image      String
  userId     String
  storeId    String
  store      Store      @relation(fields: [storeId], references: [id])
  categories Category[]
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @default(now()) @map(name: "updated_at")

  @@map("billboards")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  userId      String
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")

  @@map("categories")
}

model Size {
  id        String    @id @default(cuid())
  name      String
  value     String
  userId    String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  products  Product[]

  @@map("sizes")
}

model Color {
  id        String    @id @default(cuid())
  name      String
  value     String
  userId    String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")

  @@map("colors")
}

model Product {
  id         String      @id @default(cuid())
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  image      String
  userId     String
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  orderItem  OrderItem[]
  createdAt  DateTime    @default(now()) @map(name: "created_at")
  updatedAt  DateTime    @default(now()) @map(name: "updated_at")

  @@map("products")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Order {
  id         String      @id @default(cuid())
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  orderItems OrderItem[]
  createdAt  DateTime    @default(now()) @map(name: "created_at")
  updatedAt  DateTime    @default(now()) @map(name: "updated_at")

  @@map("orders")
}
